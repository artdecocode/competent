<types namespace="_competent">
  <import from="@externs/preact" ns="preact" name="Component" link="https://github.com/externs/preact/wiki/Component" desc="A base class that is usually subclassed to create stateful Preact components."/>
  <import from="restream" name="Rule" link="https://github.com/artdecocode/restream#rule-type" desc="An object with a `re:RegEx` and `replacement` properties."/>

  <method name="competent" desc="Creates a rule for _Replaceable_ from the `restream` package that replaces HTML with rendered JSX components. The configuration object will be needed to export components, so that they can then be rendered on the page using JavaScript." return="!_restream.Rule">
    <arg type="!Object<string, !Function|function(new: preact.Component)>" name="components">
      Components to extract from HTML and render using _Preact's_ server-side rendering. Can be either a functional stateless component, or a _Preact_ component constructor.
    </arg>
    <arg type="!_competent.Config" name="config" opt>
      Options for the program. All functions will be called with the _Replaceable_ instance as their `this` context.
    </arg>
  </method>

  <method name="makeComponentsScript" return="string" desc="Based on the exported components that were detected using the rule, generates a script for the web browser to dynamically render them with _Preact_.">
    <arg type="!Array<!_competent.ExportedComponent>" name="components">
      All components that were made exportable by the rule.
    </arg>
    <arg type="_competent.MakeCompsConfig" name="options" opt>
      The options for the make components script.
    </arg>
  </method>

  <method name="writeAssets" async void>
    <arg string name="path">
      The folder where to create the `__competent-lib.js` file, when the `externalAssets` option is passed to _makeComps_.
    </arg>
  </method>
</types>