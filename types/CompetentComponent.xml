<types namespace="_competent">
  <import name="Component" from="@externs/preact" ns="preact"
  link="https://github.com/dpck/preact/wiki/Component#type-component" />
  <import name="AcceptedChild" from="@externs/preact" ns="preact"
  link="https://github.com/dpck/preact/wiki/API#type-acceptedchild" />
  <import name="PreactProps" from="@externs/preact" ns="preact"
  link="https://github.com/dpck/preact/wiki/API#type-preactprops" />

  <constructor name="CompetentComponent" extends="preact.Component" desc="A component could have an additional API understood by _Competent_.">
    <fn name="serverRender"
      return="preact.AcceptedChild|!Array<preact.AcceptedChild>">
      <arg type="!preact.PreactProps" name="props" opt>
        Component properties.
      </arg>
      The same as render, but for the server only. Called by _Component_ using _NodeJS_ runtime and not by _Preact_ in browser, therefore _NodeJS_ API could be used here.
    </fn>
    <fn async name="fileRender" return="void">
      <arg string name="data">
        The rendered component.
      </arg>
      <arg type="!preact.PreactProps" name="props" opt>
        Component properties.
      </arg>
      When `serverRender` was specified, this method will also render the component using the standard `render` method, and return the output. The output could then be written by the implementation to the filesystem, e.g., saved as `component.html` file which is then loaded in browser by `load` method.
    </fn>
    <static name="load" void>
      <arg name="callback" type="function(Error, !Object=): void">
        A method called by browser-side bundle prior to rendering of a component with a callback, e.g., to load necessary assets. The callback should be called by the component when the loading is done, after which the component will render. The second argument to the callback can be a map of properties that should also be passed to the component.
      </arg>
      <arg name="element" type="Element">
        The element into which the component will be rendered.
      </arg>
      <arg name="props" type="!Object">
        The properties that the component will receive.
      </arg>
    </static>
  </constructor>
</types>