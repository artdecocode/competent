const { _competent: __competent, _makeComponentsScript } = require('./competent')

/**
 * Extracts, Renders And Exports For Dynamic Render JSX Components From Within HTML.
 * @param {!Object<string, function({ children: !Array<string>})>} components The components to look for and render.
 * @param {!_competent.Config} [conf] Options for the program. All functions will be called with the Replaceable instance as their `this` context.
 * @param {boolean} [conf.removeOnError=false] If there was an error when rendering the component, controls whether the HTML should be be left on the page. Default `false`.
 * @param {function(): string} [conf.getId] The function which returns an `id` for the html element.
 * @param {function(!_competent.Props,!_competent.Meta,string): Object} [conf.getProps] The function which takes the parsed properties from HTML and competent's meta methods, and returns the properties object to be passed to the component. By default, returns the properties simply merged with _meta_.
 * @param {function(string,string,!_competent.Props,!Array<string>)} [conf.markExported] If the component called the `export` meta method, this function will be called at the end of the replacement rule with its key, root id, properties and children as strings.
 * @param {function(string)} [conf.onSuccess] The callback at the end of a successful replacement with the component's key.
 * @param {function(string,Error,number,string)} [conf.onFail] The callback at the end of failed replacement with the component's key, error object, position number and the string which was fed to the rule.
 * @param {function(): !Object} [conf.getContext] The function to be called to get the properties to set on the child _Replaceable_ started to recursively replace inner HTML. This is needed if the root _Replaceable_ was assigned some properties that are referenced in components.
 * @param {function(string,boolean): !Array<!_restream.Rule>} [conf.getReplacements] The function which should return the list of replacements for `renderAgain` method. By default, the initial rule generated by _Competent_ is used. The first argument passed is the key, and the second argument is the value passed via the `renderAgain`, that is if the component might render recursively.
 * @return {Rule}
 */
function competent(components, conf) {
  return __competent(components, conf)
}

/**
 * From the array of exported components, creates an ES6 modules script that will render them on a page using Preact.
 * @param {!Array<!_competent.ExportedComponent>} components The list of exported components
 * @param {string} componentsLocation The location of the module which exports a default object with components relative to where this file will be placed.
 * @param {boolean} [includeH=false] Imports the `h` pragma from preact. By default is disabled, because can be added automatically by `Depack` and `@idio/frontend`.
 * @param {Object} [props] Properties.
 * @param {boolean|string} [io=false] Should the generated script use the intersection observer. When a string is passed, it is used as the root margin option (default is, `0px 0px 76px 0px`)
 */
function makeComponentsScript(components, componentsLocation, includeH = false, props = {}, io = false) {
  return _makeComponentsScript(components, componentsLocation, includeH, props, io)
}

module.exports = competent
module.exports.makeComponentsScript = makeComponentsScript

/* typal types/index.xml namespace */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {_competent.Config} Config `＠record` Options for the program. All functions will be called with the Replaceable instance as their `this` context.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {Object} _competent.Config `＠record` Options for the program. All functions will be called with the Replaceable instance as their `this` context.
 * @prop {boolean} [removeOnError=false] If there was an error when rendering the component, controls whether the HTML should be be left on the page. Default `false`.
 * @prop {function(): string} [getId] The function which returns an `id` for the html element.
 * @prop {function(!_competent.Props,!_competent.Meta,string): Object} [getProps] The function which takes the parsed properties from HTML and competent's meta methods, and returns the properties object to be passed to the component. By default, returns the properties simply merged with _meta_.
 * @prop {function(string,string,!_competent.Props,!Array<string>)} [markExported] If the component called the `export` meta method, this function will be called at the end of the replacement rule with its key, root id, properties and children as strings.
 * @prop {function(string)} [onSuccess] The callback at the end of a successful replacement with the component's key.
 * @prop {function(string,Error,number,string)} [onFail] The callback at the end of failed replacement with the component's key, error object, position number and the string which was fed to the rule.
 * @prop {function(): !Object} [getContext] The function to be called to get the properties to set on the child _Replaceable_ started to recursively replace inner HTML. This is needed if the root _Replaceable_ was assigned some properties that are referenced in components.
 * @prop {function(string,boolean): !Array<!_restream.Rule>} [getReplacements] The function which should return the list of replacements for `renderAgain` method. By default, the initial rule generated by _Competent_ is used. The first argument passed is the key, and the second argument is the value passed via the `renderAgain`, that is if the component might render recursively.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {_competent.Props} Props The properties extracted from HTML and to be passed to the component for rendering.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {Object<string, *>} _competent.Props The properties extracted from HTML and to be passed to the component for rendering.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {_competent.Meta} Meta Service methods for `competent`.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {Object} _competent.Meta Service methods for `competent`.
 * @prop {function(boolean=)} export When called, marks the component for export and adds an `id` if the root element of the hyper result did not have it. Individual instances can pass the `false` value if they don't want to get exported.
 * @prop {function(boolean,number=)} setPretty The function which controls whether to enable pretty printing, and the line width.
 * @prop {function(boolean=)} renderAgain Render the result of the component again. This is needed when a component might contain other components when rendered. No recursion is allowed otherwise the program will get stuck. Use `getReplacements` to specify how to acquire the replacements for the new _Replaceable_ stream. The argument passed specifies if the component might render recursively (default `false`).
 */

/* typal types/exported.xml namespace */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {_competent.ExportedComponent} ExportedComponent `＠record` An exported component.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {Object} _competent.ExportedComponent `＠record` An exported component.
 * @prop {string} key The name of the component as passed to _Competent_.
 * @prop {string} id The ID where the component should render.
 * @prop {!Object} props Properties of the component.
 * @prop {!Array<string>} children Children as strings.
 */

/* typal node_modules/restream/types/rules.xml namespace */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {_restream.Replacer} Replacer
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {function(this:_restream.ReplaceableInterface, ...string): string} _restream.Replacer
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {_restream.AsyncReplacer} AsyncReplacer
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {function(this:_restream.ReplaceableInterface, ...string): !Promise<string>} _restream.AsyncReplacer
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {_restream.Rule} Rule A replacement rule.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {Object} _restream.Rule A replacement rule.
 * @prop {!RegExp} re The regular expression to match input against.
 * @prop {!(string|_restream.Replacer|_restream.AsyncReplacer)} replacement The replacement string, or the replacer function.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {_restream.ReplaceableInterface} ReplaceableInterface `＠interface` An interface for the context accessible via this in replacer functions.
 */
/**
 * @suppress {nonStandardJsDocs}
 * @typedef {Object} _restream.ReplaceableInterface `＠interface` An interface for the context accessible via this in replacer functions.
 * @prop {function(string, ...*)} emit Emit an event. Inherited from the `EventEmitter` which _Replaceable_ extends.
 * @prop {function()} brake After calling this method, the following rules and matches within the same rule won't be able to make any more changes.
 * @prop {function(string, !Object<string, *>=): !Promise<string>} replace Creates a new _Replaceable_ by copying all rules, assigns the context to it and replaces the data. The `this` won't be shared by rules, but the context will be updated: `const context = { test: this.test }; content = await this.replace(content, context); this.test = context.test`.
 */

/**
 * @typedef {import('@externs/preact').VNode} VNode
 */
/**
 * @typedef {import('@externs/preact').Component} Component
 */
