<types namespace="_competent">
  <type type="Object<string, *>" name="Props" desc="The properties extracted from HTML and to be passed to the component for rendering.">
  </type>
  
  <type name="Meta" desc="Service methods for `competent`.">
    <fn name="export">
      <arg boolean name="shouldExport" opt>Whether to export the component.</arg>
      When called, marks the component for export and adds an `id` if the root element of the hyper result did not have it. Individual instances can pass the `false` value if they don't want to get exported.
    </fn>
    <fn name="setPretty">
      <arg boolean name="isPretty">Whether to pretty print.</arg>
      <arg number name="lineLength" opt>Number of characters after which to wrap lines.</arg>
      The function which controls whether to enable pretty printing, and the line width.
    </fn>
    <fn name="renderAgain">
      <arg boolean name="recursiveRender" opt>
        Whether to render element with the same name.
      </arg>
      Render the result of the component again. This is needed when a component might contain other components when rendered. No recursion is allowed otherwise the program will get stuck. Use `getReplacements` to specify how to acquire the replacements for the new _Replaceable_ stream. The argument passed specifies if the component might render recursively (default `false`).
    </fn>
  </type>

  <type record name="Config" desc="Options for the program. All functions will be called with the Replaceable instance as their `this` context.">
    <fn opt return="string" name="getId">
      The function which returns an `id` for the html element.
    </fn>
    <fn opt name="getProps" return="Object">
      <arg name="props" type="!_competent.Props">Properties.</arg>
      <arg name="meta" type="!_competent.Meta">Meta properties.</arg>
      <arg string name="componentName">The name of the component.</arg>
      The function which takes the parsed properties from HTML and competent's meta methods, and returns the properties object to be passed to the component. By default, returns the properties simply merged with _meta_.
    </fn>
    <fn opt name="markExported">
      <arg string name="key">Component key.</arg>
      <arg string name="id">
        The ID assigned manually either via the element's id attribute, or with the `getId` function automatically.
      </arg>
      <arg type="!_competent.Props" name="props">Component properties.</arg>
      <arg type="!Array<string>" name="children">Component children.</arg>
      If the component called the `export` meta method, this function will be called at the end of the replacement rule with its key, root id, properties and children as strings.
    </fn>
    <prop boolean name="removeOnError" default="false">
      If there was an error when rendering the component, controls whether the HTML should be be left on the page.
    </prop>
    <fn name="onSuccess">
      <arg string name="componentName">The element name, e.g., `my-element`.</arg>
      The callback at the end of a successful replacement with the component's key.
    </fn>
    <fn opt type="function(string, !Error, number, string)" name="onFail">
      <arg string name="componentName">The element name, e.g., `my-element`.</arg>
      <arg name="error" type="Error">The error.</arg>
      <arg number name="position">The position in the input text where element started.</arg>
      <arg string name="input">The input string.</arg>
      The callback at the end of failed replacement with the component's key, error object, position number and the string which was fed to the rule.
    </fn>
    <fn opt name="getContext" return="!Object">
      The function to be called to get the properties to set on the child _Replaceable_ started to recursively replace inner HTML. This is needed if the root _Replaceable_ was assigned some properties that are referenced in components.
    </fn>
    <fn opt name="getReplacements" return="!Array">
      <arg string name="componentName">Component key.</arg>
      <arg boolean name="recursiveRenderAgain">The value passed to `renderAgain`.</arg>
      The function which should return the list of replacements for `renderAgain` method. By default, the initial rule generated by _Competent_ is used. The first argument passed is the key, and the second argument is the value passed via the `renderAgain`, that is if the component might render recursively.
    </fn>
  </type>
</types>